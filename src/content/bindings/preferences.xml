<?xml version="1.0"?>

<!DOCTYPE bindings [
  <!ENTITY % preferencesDTD SYSTEM "chrome://global/locale/preferences.dtd">
  %preferencesDTD;
  <!ENTITY % gcDTD SYSTEM "chrome://guiconfig/locale/gcLocale.dtd" >
  %gcDTD;
]>

<bindings id="guiconfigBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <binding id="gcprefwindow" extends="chrome://global/content/bindings/preferences.xml#prefwindow">
    <resources>
      <stylesheet src="chrome://guiconfig/skin/style/gcprefwindow.css"/>
    </resources>

    <content title="&browser.item.label;"
             closebuttonlabel="&preferencesCloseButton.label;"
             closebuttonaccesskey="&preferencesCloseButton.accesskey;"
             dlgbuttons="accept,cancel" persist="lastSelected screenX screenY" role="dialog">
      <xul:popupset>
        <xul:tooltip id="guiconfig-info-box" anonid="info-box" class="info-box" orient="vertical" noautohide="true">
          <xul:label class="header" value="&config.description;" />
          <xul:description anonid="description"></xul:description>
          <xul:label class="header" value="&config.preference_key;" />
          <xul:description anonid="key"></xul:description>
        </xul:tooltip>
        <xul:menupopup id="guiconfig-preference-context">
          <xul:menuitem class="menuitem-iconic" label="&config.todefault;" image="/skin/icons/actions/reset.png" oncommand="document.getBindingParent(this).resetPreference()" />
          <xul:menuitem class="menuitem-iconic" label="&config.copykey;" image="/skin/icons/actions/copy.png" oncommand="document.getBindingParent(this).copyPreferenceKey()" />
        </xul:menupopup>
      </xul:popupset>

      <xul:windowdragbox orient="vertical">
        <xul:radiogroup anonid="selector" orient="horizontal" class="paneSelector chromeclass-toolbar" role="listbox"/>
      </xul:windowdragbox>

      <xul:hbox id="guiconfig-preference-search">
        <xul:spacer flex="1"/>
        <xul:textbox type="search" timeout="500" emptytext="&config.search;" oncommand="document.getBindingParent(this).search(this.value)"/>
      </xul:hbox>

      <xul:hbox anonid="body" flex="1" class="paneDeckContainer">
        <xul:deck anonid="paneDeck" flex="1">
          <children includes="prefpane"/>
        </xul:deck>
      </xul:hbox>

      <xul:hbox anonid="dlg-buttons" class="prefWindow-dlgbuttons">
        <xul:button dlgtype="disclosure" class="dialog-button" hidden="true"/>
        <xul:button dlgtype="help" class="dialog-button" hidden="true" icon="help"/>
        <xul:button dlgtype="extra2" class="dialog-button" hidden="true"/>
        <xul:button dlgtype="extra1" class="dialog-button" hidden="true"/>
        <xul:spacer anonid="spacer" flex="1"/>
        <xul:button dlgtype="cancel" class="dialog-button" icon="cancel"/>
        <xul:button dlgtype="accept" class="dialog-button" icon="accept"/>
      </xul:hbox>

      <children/>
    </content>

    <implementation>
      <constructor>
      <![CDATA[
        Components.utils.import('chrome://guiconfig/content/guiconfig.js');

        this._selector = document.getAnonymousElementByAttribute(this, 'anonid', 'selector');
        this._body = document.getAnonymousElementByAttribute(this, 'anonid', 'body');
        this._infoBox = document.getAnonymousElementByAttribute(this, 'anonid', 'info-box');
        this._description = document.getAnonymousElementByAttribute(this, 'anonid', 'description');
        this._key = document.getAnonymousElementByAttribute(this, 'anonid', 'key');

        var self = this;
        var preferenceSource = this.getAttribute('source');
        guiconfig.buildDialog(document, preferenceSource, function(panes, script) {
          for (var pane of panes) {
            self.addPane(pane);
          }

          // Disable the search radio element so it cannot be selected
          // when the user navigates with a keyboard.
          var searchSelector = self._selector.querySelector('radio[pane="guiconfig-search-results"]');
          searchSelector.disabled = true;
          searchSelector.style.visibility = 'hidden';

          var lastSelectedPane = self.lastSelected ? document.getElementById(self.lastSelected) : null;
          self.showPane(lastSelectedPane && lastSelectedPane != self.searchPane ? lastSelectedPane : self.preferencePanes[0]);

          function runScript() {
            self.removeEventListener('load', runScript);
            guiconfig.runPreferenceScript(document, script);
          }
          self.addEventListener('load', runScript);
        });
      ]]>
      </constructor>
      <method name="setInfo">
        <parameter name="anchor"/>
        <parameter name="text"/>
        <parameter name="key"/>
        <body>
        <![CDATA[
          var infoBox = this._infoBox;

          function showInfoBox(anchor) {
            if (anchor) {
              var height = anchor.clientHeight;
              infoBox.openPopup(anchor, 'end_before', 0, height / 2, false, false);
            } else {
              infoBox.openPopup(this._body, 'end_before', 0, 0, false, false);
            }
          }

          function hideInfoBox() {
            infoBox.hidePopup();
          }

          if (!text && !key) {
            if (!this._infoBoxTimeout) {
              var self = this;
              this._infoBoxTimeout = setTimeout(function() {
                self._infoBoxTimeout = null;
                hideInfoBox();
              }, 500);
            }
          } else {
            if (this._infoBoxTimeout) {
              clearTimeout(this._infoBoxTimeout);
              this._infoBoxTimeout = null;
            }
            hideInfoBox();
            this.descriptionText = text || '—';
            this.keyText = key || '—';
            showInfoBox(anchor);
          }
        ]]>
        </body>
      </method>
      <method name="showPreference">
        <parameter name="key"/>
        <body>
        <![CDATA[
          var node = document.getElementById(key + '-view');
          while (node) {
            switch (node.nodeName) {
              case 'box':
                node.scrollIntoView();
                if (node.highlight) {
                  node.highlight();
                }
                break;
              case 'tabpanel':
                node.parentNode.parentNode.selectedIndex = Array.prototype.indexOf.call(node.parentNode.children, node);
                break;
              case 'prefpane':
                this.showPane(node);
                break;
            }
            node = node.parentNode;
          }
        ]]>
        </body>
      </method>
      <method name="resetPreference">
        <body>
        <![CDATA[
          if (!this.contextPreference) return;

          var key = this.contextPreference.getAttribute('data-key');
          var pref = document.getElementById(key);
          if (!pref) return;

          var defaultValue = pref.defaultValue;
          // If there is a default value reset it manually, because reset()
          // always sets the value to undefined, which messes up dependencies.
          if (defaultValue === null) {
            pref.reset();
          } else {
            pref.value = defaultValue;
          }
        ]]>
        </body>
      </method>
      <method name="copyPreferenceKey">
        <body>
        <![CDATA[
          if (!this.contextPreference) return;

          var key = this.contextPreference.getAttribute('data-key');
          var clipboardHelper = Components.classes['@mozilla.org/widget/clipboardhelper;1']
                                    .getService(Components.interfaces.nsIClipboardHelper);
          clipboardHelper.copyString(key);
        ]]>
        </body>
      </method>
      <method name="search">
        <parameter name="query"/>
        <body>
        <![CDATA[
          Components.utils.import('chrome://guiconfig/content/guiconfig.js');

          var self = this;
          var preferenceSource = this.getAttribute('source');

          var searchSelector = this._selector.querySelector('radio[pane="guiconfig-search-results"]');
          searchSelector.disabled = !query;
          searchSelector.style.visibility = query ? 'visible' : 'hidden';

          if (query) {
            guiconfig.buildPreferenceSearchResult(document, preferenceSource, query, function(result) {
              for (var child of self.searchPane.children) {
                self.searchPane.removeChild(child);
              }
              for (var child of result.firstChild.children) {
                self.searchPane.appendChild(child);
              }
              if (!self.classList.contains('search-active')) {
                self.lastSelectedBeforeSearch = self.currentPane;
                self.classList.add('search-active');
              }
              self.showPane(self.searchPane);
            });
          } else {
            if (self.currentPane === self.searchPane) {
              self.showPane(self.lastSelectedBeforeSearch);
            }
            self.classList.remove('search-active');
          }
        ]]>
        </body>
      </method>

      <field name="contextPreference"/>
      <field name="lastSelectedBeforeSearch"/>
      <property name="descriptionText" onget="return this._description.textContent;" onset="return this._description.textContent = val;"/>
      <property name="keyText" onget="return this._key.textContent;" onset="return this._key.textContent = val;"/>
      <property name="searchPane" onget="return this.preferencePanes[this.preferencePanes.length - 1]"/>
    </implementation>
  </binding>

  <binding id="gcpage">
    <resources>
      <stylesheet src="chrome://guiconfig/skin/style/gcpage.css"/>
    </resources>

    <content title="&browser.item.label;">
      <html:link rel="shortcut icon" href="chrome://guiconfig/skin/icons/guiconfig-monochrome-16.png"/>

      <xul:popupset>
        <xul:tooltip id="guiconfig-info-box" anonid="info-box" class="info-box" orient="vertical" noautohide="true">
          <xul:label class="info-box-header" value="&config.description;" />
          <xul:description anonid="description"></xul:description>
          <xul:label class="info-box-header" value="&config.preference_key;" />
          <xul:description anonid="key"></xul:description>
        </xul:tooltip>
        <xul:menupopup id="guiconfig-preference-context">
          <xul:menuitem class="menuitem-iconic" label="&config.todefault;" image="/skin/icons/actions/reset.png" oncommand="document.getBindingParent(this).resetPreference()" />
          <xul:menuitem class="menuitem-iconic" label="&config.copykey;" image="/skin/icons/actions/copy.png" oncommand="document.getBindingParent(this).copyPreferenceKey()" />
        </xul:menupopup>
      </xul:popupset>

      <xul:stack flex="1">
        <xul:hbox anonid="body" flex="1">
          <xul:vbox class="menu" anonid="menu">
            <xul:hbox id="guiconfig-preference-search">
              <xul:textbox type="search" timeout="500" size="10" flex="1" emptytext="&config.search;" oncommand="document.getBindingParent(this).search(this.value)"/>
            </xul:hbox>
          </xul:vbox>
          <children/>
        </xul:hbox>
      </xul:stack>
    </content>
    <implementation>
      <constructor>
      <![CDATA[
        Components.utils.import('chrome://guiconfig/content/guiconfig.js');

        this._infoBox = document.getAnonymousElementByAttribute(this, 'anonid', 'info-box');
        this._description = document.getAnonymousElementByAttribute(this, 'anonid', 'description');
        this._key = document.getAnonymousElementByAttribute(this, 'anonid', 'key');
        this._body = document.getAnonymousElementByAttribute(this, 'anonid', 'body');
        this._menu = document.getAnonymousElementByAttribute(this, 'anonid', 'menu');

        var self = this;
        var preferenceSource = this.getAttribute('source');
        guiconfig.buildPage(document, preferenceSource, function(page, script) {
          var categories = page.getElementById('categories');
          var mainContent = page.querySelector('.main-content');
          var prefPane = page.getElementById('mainPrefPane');
          categories.addEventListener('select', function(event) {
            var categoryId = event.target.value;
            for (var elem of prefPane.children) {
              var category = elem.getAttribute('data-category');
              if (category) {
                elem.hidden = category !== categoryId;
              }
            }
          });
          self._body.appendChild(mainContent);
          self._menu.appendChild(categories);

          // Disable the search radio element so it cannot be selected
          // when the user navigates with a keyboard.
          var searchSelector = self.categories.querySelector('richlistitem[value="categorySearch"]');
          searchSelector.disabled = true;
          searchSelector.style.visibility = 'hidden';

          window.addEventListener('load', function runScript() {
            window.removeEventListener('load', runScript);
            var event = document.createEvent("Events");
            event.initEvent('paneload', true, true);
            prefPane.dispatchEvent(event);
            guiconfig.runPreferenceScript(document, script);
          });
        });
      ]]>
      </constructor>

      <method name="setInfo">
        <parameter name="anchor"/>
        <parameter name="text"/>
        <parameter name="key"/>
        <body>
        <![CDATA[
          var infoBox = this._infoBox;

          function showInfoBox(anchor) {
            if (anchor) {
              var height = anchor.clientHeight;
              infoBox.openPopup(anchor, 'after_end', 0, height / 2, false, false);
            } else {
              infoBox.openPopup(this._body, 'after_end', 0, 0, false, false);
            }
          }

          function hideInfoBox() {
            infoBox.hidePopup();
          }

          if (!text && !key) {
            if (!this._infoBoxTimeout) {
              var self = this;
              this._infoBoxTimeout = setTimeout(function() {
                self._infoBoxTimeout = null;
                hideInfoBox();
              }, 500);
            }
          } else {
            if (this._infoBoxTimeout) {
              clearTimeout(this._infoBoxTimeout);
              this._infoBoxTimeout = null;
            }
            hideInfoBox();
            this.descriptionText = text || '—';
            this.keyText = key || '—';
            showInfoBox(anchor);
          }
        ]]>
        </body>
      </method>
      <method name="showPreference">
        <parameter name="key"/>
        <body>
        <![CDATA[
          var node = document.getElementById(key + '-view');
          while (node) {
            switch (node.nodeName) {
              case 'box':
                node.scrollIntoView();
                if (node.highlight) {
                  node.highlight();
                }
                break;
              case 'tabpanel':
                node.parentNode.parentNode.selectedIndex = Array.prototype.indexOf.call(node.parentNode.children, node);
                break;
              case 'hbox':
              case 'vbox':
                category = node.getAttribute('data-category');
                if (category) {
                  this.categories.value = category;
                }
                break;
            }
            node = node.parentNode;
          }
        ]]>
        </body>
      </method>
      <method name="resetPreference">
        <body>
        <![CDATA[
          if (!this.contextPreference) return;

          var key = this.contextPreference.getAttribute('data-key');
          var pref = document.getElementById(key);
          if (!pref) return;

          var defaultValue = pref.defaultValue;
          // If there is a default value reset it manually, because reset()
          // always sets the value to undefined, which messes up dependencies.
          if (defaultValue === null) {
            pref.reset();
          } else {
            pref.value = defaultValue;
          }
        ]]>
        </body>
      </method>
      <method name="copyPreferenceKey">
        <body>
        <![CDATA[
          if (!this.contextPreference) return;

          var key = this.contextPreference.getAttribute('data-key');
          var clipboardHelper = Components.classes['@mozilla.org/widget/clipboardhelper;1']
                                    .getService(Components.interfaces.nsIClipboardHelper);
          clipboardHelper.copyString(key);
        ]]>
        </body>
      </method>
      <method name="search">
        <parameter name="query"/>
        <body>
        <![CDATA[
          Components.utils.import('chrome://guiconfig/content/guiconfig.js');

          var self = this;
          var preferenceSource = this.getAttribute('source');

          var searchSelector = this.categories.querySelector('richlistitem[value="categorySearch"]');
          searchSelector.disabled = !query;
          searchSelector.style.visibility = query ? 'visible' : 'hidden';

          if (query) {
            guiconfig.buildPreferenceSearchResult(document, preferenceSource, query, function(result) {
              for (var child of self.searchResults.children) {
                self.searchResults.removeChild(child);
              }
              for (var child of result.firstChild.children) {
                self.searchResults.appendChild(child);
              }
              if (!self.classList.contains('search-active')) {
                self.lastSelectedBeforeSearch = self.categories.value;
                self.classList.add('search-active');
              }
              self.categories.value = 'categorySearch';
            });
          } else {
            if (self.categories.value === 'categorySearch') {
              self.categories.value = self.lastSelectedBeforeSearch;
            }
            self.classList.remove('search-active');
          }
        ]]>
        </body>
      </method>

      <field name="contextPreference"/>
      <field name="lastSelectedBeforeSearch"/>
      <property name="descriptionText" onget="return this._description.textContent;" onset="return this._description.textContent = val;"/>
      <property name="keyText" onget="return this._key.textContent;" onset="return this._key.textContent = val;"/>
      <property name="categories" onget="return this.querySelector('#categories')"/>
      <property name="searchResults" onget="return this.querySelector('#guiconfig-search-results')"/>
    </implementation>
  </binding>

  <binding id="base-gcpreference">
    <implementation>
      <constructor>
      <![CDATA[
        this._prefWindow = document.documentElement;

        var self = this;
        function attachPopup(elem) {
          elem.addEventListener('mouseenter', function(event) {
            var target = event.target;
            self._prefWindow.setInfo(target, target.getAttribute('data-description'),
                target.getAttribute('data-key'));
          });
          elem.addEventListener('mouseleave', function(event) {
            self._prefWindow.setInfo();
          });
        }

        if (this.hasAttribute('data-key')) {
          attachPopup(this);
        }
        for (var child of this.querySelectorAll('*[data-key]')) {
          attachPopup(child);
        }
      ]]>
      </constructor>
    </implementation>
  </binding>

  <binding id="gcpreference" extends="chrome://guiconfig/content/bindings/preferences.xml#base-gcpreference">
    <content orient="horizontal" align="center" context="guiconfig-preference-context">
      <children/>
    </content>

    <implementation>
      <constructor>
      <![CDATA[
        if (this.hasAttribute('data-indent')) {
          this.classList.add('indent');
        }
      ]]>
      </constructor>
      <method name="highlight">
        <body>
        <![CDATA[
          this.classList.remove('highlight');
          var self = this;
          setTimeout(function() {
            self.classList.add('highlight');
          }, 0);
        ]]>
        </body>
      </method>
    </implementation>

    <handlers>
      <handler event="contextmenu">
      <![CDATA[
        this._prefWindow.contextPreference = this;
      ]]>
      </handler>
    </handlers>
  </binding>

  <binding id="gcsearchresult" extends="chrome://guiconfig/content/bindings/preferences.xml#base-gcpreference">
    <content orient="vertical">
      <xul:label style="font-size: smaller" xbl:inherits="value=breadcrumbs"/>
      <xul:hbox>
        <xul:label class="text-link header" xbl:inherits="value=label" onclick="document.getBindingParent(this).showPreference()"/>
      </xul:hbox>
      <children/>
    </content>

    <implementation>
      <method name="showPreference">
        <body>
        <![CDATA[
          this._prefWindow.showPreference(this.getAttribute('data-key'));
        ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="filepicker">
    <content orient="horizontal" align="center" flex="1">
      <xul:label anonid="label" xbl:inherits="value=label"/>
      <children includes="textbox"/>
      <xul:button anonid="button" label="&config.browse;" title="&config.choosefile;" icon="open" oncommand="document.getBindingParent(this).openDialog()"/>
    </content>

    <implementation>
      <constructor>
      <![CDATA[
        this._text = this.querySelector('textbox');
        this._label = document.getAnonymousElementByAttribute(this, 'anonid', 'label');
        this._button = document.getAnonymousElementByAttribute(this, 'anonid', 'button');
      ]]>
      </constructor>
      <method name="openDialog">
        <body>
        <![CDATA[
          var Cc = Components.classes;
          var Ci = Components.interfaces;

          var filePicker = Cc['@mozilla.org/filepicker;1'].createInstance(Ci.nsIFilePicker);
          filePicker.init(window, this.getAttribute('title'), Ci.nsIFilePicker.modeOpen);

          var filters = this.getAttribute('filters');
          if (filters) {
            var filterTypes = filters.split(',');
            for (var type of filterTypes) {
              var name = 'filter' + type;
              if (name in Ci.nsIFilePicker) {
                filePicker.appendFilters(Ci.nsIFilePicker[name]);
              }
            }
          }

          var status = filePicker.show();
          if (status === Ci.nsIFilePicker.returnOK &&
              this._text.value !== filePicker.file.path) {
            this._text.value = filePicker.file.path;
            var event = document.createEvent("Events");
            event.initEvent("change", true, true);
            this._text.dispatchEvent(event);
          }
        ]]>
        </body>
      </method>

      <property name="disabled">
        <setter>
        <![CDATA[
          this._label.disabled = val;
          this._button.disabled = val;
        ]]>
        </setter>
        <getter>
        <![CDATA[
          return this._label.disabled && this._button.disabled;
        ]]>
        </getter>
      </property>
    </implementation>
  </binding>
</bindings>
